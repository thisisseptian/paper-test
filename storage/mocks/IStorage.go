// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	model "paper-test/model"

	mock "github.com/stretchr/testify/mock"
)

// IStorage is an autogenerated mock type for the IStorage type
type IStorage struct {
	mock.Mock
}

// GetDisbursements provides a mock function with given fields: walletID
func (_m *IStorage) GetDisbursements(walletID int64) ([]model.Disbursement, error) {
	ret := _m.Called(walletID)

	if len(ret) == 0 {
		panic("no return value specified for GetDisbursements")
	}

	var r0 []model.Disbursement
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]model.Disbursement, error)); ok {
		return rf(walletID)
	}
	if rf, ok := ret.Get(0).(func(int64) []model.Disbursement); ok {
		r0 = rf(walletID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Disbursement)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(walletID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUserID provides a mock function with given fields: userID
func (_m *IStorage) GetUserByUserID(userID int64) (model.User, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUserID")
	}

	var r0 model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (model.User, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int64) model.User); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUsernameAndPassword provides a mock function with given fields: username, password
func (_m *IStorage) GetUserByUsernameAndPassword(username string, password string) (model.User, error) {
	ret := _m.Called(username, password)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsernameAndPassword")
	}

	var r0 model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (model.User, error)); ok {
		return rf(username, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) model.User); ok {
		r0 = rf(username, password)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWalletByWalletID provides a mock function with given fields: walletID
func (_m *IStorage) GetWalletByWalletID(walletID int64) (model.Wallet, error) {
	ret := _m.Called(walletID)

	if len(ret) == 0 {
		panic("no return value specified for GetWalletByWalletID")
	}

	var r0 model.Wallet
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (model.Wallet, error)); ok {
		return rf(walletID)
	}
	if rf, ok := ret.Get(0).(func(int64) model.Wallet); ok {
		r0 = rf(walletID)
	} else {
		r0 = ret.Get(0).(model.Wallet)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(walletID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitData provides a mock function with given fields:
func (_m *IStorage) InitData() {
	_m.Called()
}

// InsertDisbursement provides a mock function with given fields: disbursement
func (_m *IStorage) InsertDisbursement(disbursement model.Disbursement) (int64, error) {
	ret := _m.Called(disbursement)

	if len(ret) == 0 {
		panic("no return value specified for InsertDisbursement")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Disbursement) (int64, error)); ok {
		return rf(disbursement)
	}
	if rf, ok := ret.Get(0).(func(model.Disbursement) int64); ok {
		r0 = rf(disbursement)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(model.Disbursement) error); ok {
		r1 = rf(disbursement)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWalletBalanceByWalletID provides a mock function with given fields: wallet
func (_m *IStorage) UpdateWalletBalanceByWalletID(wallet model.Wallet) error {
	ret := _m.Called(wallet)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWalletBalanceByWalletID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Wallet) error); ok {
		r0 = rf(wallet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIStorage creates a new instance of IStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *IStorage {
	mock := &IStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
